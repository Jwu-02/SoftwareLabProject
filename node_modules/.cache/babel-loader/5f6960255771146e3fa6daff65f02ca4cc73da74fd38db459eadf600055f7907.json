{"ast":null,"code":"import React,{useState}from'react';import{useNavigate}from\"react-router\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const NewUser=props=>{const[userID,setUserID]=useState(\"\");const[password,setPassword]=useState(\"\");const[message,setMessage]=useState(\"\");const navigate=useNavigate();const handleExistingUserClick=()=>{navigate('/');};const handleRegister=async e=>{e.preventDefault();// Check if userID or password is null, empty or just spaces\nif(!userID||!userID.trim()||!password||!password.trim()){setMessage(\"User ID or password cannot be empty\");return;}// Prepare data to send to the backend\nconst data={userID:userID,password:password};try{// Make a POST request to your backend\nconst response=await fetch('/save_user',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});// Handle the response from the backend\nconst responseData=await response.json();console.log(responseData);// Log the response for debugging purposes\n// Optionally, you can handle the response here and update your UI accordingly\nif(response.status===201){// User registered successfully\n// Navigate to the project page\nsetMessage(\"User registered successfully\");}else{// Registration failed\n// Update your UI accordingly\nsetMessage(responseData.message);}}catch(error){console.error('Error:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"auth-form-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"ECE 461L: User Management\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Register for New User\"}),/*#__PURE__*/_jsxs(\"form\",{className:\"newuser-form\",onSubmit:handleRegister,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"userID\",children:\"userID\"}),/*#__PURE__*/_jsx(\"input\",{value:userID,onChange:e=>setUserID(e.target.value),type:\"text\",id:\"userID\",name:\"userID\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"password\"}),/*#__PURE__*/_jsx(\"input\",{value:password,onChange:e=>setPassword(e.target.value),type:\"text\",id:\"password\",name:\"password\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Register\"})]}),/*#__PURE__*/_jsx(\"div\",{children:message}),/*#__PURE__*/_jsx(\"button\",{className:\"link-button\",onClick:handleExistingUserClick,children:\"Already have an account? Login here\"})]});};export default NewUser;","map":{"version":3,"names":["React","useState","useNavigate","jsx","_jsx","jsxs","_jsxs","NewUser","props","userID","setUserID","password","setPassword","message","setMessage","navigate","handleExistingUserClick","handleRegister","e","preventDefault","trim","data","response","fetch","method","headers","body","JSON","stringify","responseData","json","console","log","status","error","className","children","onSubmit","htmlFor","value","onChange","target","type","id","name","onClick"],"sources":["C:/Users/jhhuy/Documents/ECE 461L/CheckPt2Submission/src/pages/NewUser.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst NewUser = (props) => {\r\n\r\n    const [userID, setUserID] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    \r\n    const navigate = useNavigate();\r\n\r\n    const handleExistingUserClick = () => {\r\n        navigate('/')\r\n    }\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n\r\n         // Check if userID or password is null, empty or just spaces\r\n         if (!userID || !userID.trim() || !password || !password.trim()) {\r\n            setMessage(\"User ID or password cannot be empty\");\r\n            return;\r\n        }\r\n\r\n        // Prepare data to send to the backend\r\n        const data = {\r\n            userID: userID,\r\n            password: password\r\n        };\r\n\r\n        try {\r\n            // Make a POST request to your backend\r\n            const response = await fetch('/save_user', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            });\r\n\r\n            // Handle the response from the backend\r\n            const responseData = await response.json();\r\n            console.log(responseData); // Log the response for debugging purposes\r\n\r\n            // Optionally, you can handle the response here and update your UI accordingly\r\n            if (response.status === 201) {\r\n                // User registered successfully\r\n                // Navigate to the project page\r\n                setMessage(\"User registered successfully\");\r\n            } else{\r\n                // Registration failed\r\n                // Update your UI accordingly\r\n                setMessage(responseData.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"auth-form-container\">\r\n            <h1>ECE 461L: User Management</h1>\r\n            <h2>Register for New User</h2>\r\n            <form className=\"newuser-form\" onSubmit={handleRegister}>\r\n                <label htmlFor=\"userID\">userID</label>\r\n                <input value={userID} onChange={(e) => setUserID(e.target.value)} type=\"text\" id=\"userID\" name=\"userID\"/>\r\n\r\n                <label htmlFor=\"password\">password</label>\r\n                <input value={password} onChange={(e) => setPassword(e.target.value)} type=\"text\" id=\"password\" name=\"password\"/>\r\n\r\n                <button type=\"submit\">Register</button>\r\n            </form>\r\n            <div>{message}</div>\r\n            <button className=\"link-button\" onClick={handleExistingUserClick}>Already have an account? Login here</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewUser;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,WAAW,KAAQ,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE3C,KAAM,CAAAC,OAAO,CAAIC,KAAK,EAAK,CAEvB,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACU,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAE1C,KAAM,CAAAc,QAAQ,CAAGb,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAc,uBAAuB,CAAGA,CAAA,GAAM,CAClCD,QAAQ,CAAC,GAAG,CAAC,CACjB,CAAC,CAED,KAAM,CAAAE,cAAc,CAAG,KAAO,CAAAC,CAAC,EAAK,CAChCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAEjB;AACA,GAAI,CAACV,MAAM,EAAI,CAACA,MAAM,CAACW,IAAI,CAAC,CAAC,EAAI,CAACT,QAAQ,EAAI,CAACA,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAE,CAC7DN,UAAU,CAAC,qCAAqC,CAAC,CACjD,OACJ,CAEA;AACA,KAAM,CAAAO,IAAI,CAAG,CACTZ,MAAM,CAAEA,MAAM,CACdE,QAAQ,CAAEA,QACd,CAAC,CAED,GAAI,CACA;AACA,KAAM,CAAAW,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,YAAY,CAAE,CACvCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACP,IAAI,CAC7B,CAAC,CAAC,CAEF;AACA,KAAM,CAAAQ,YAAY,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAC1CC,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC,CAAE;AAE3B;AACA,GAAIP,QAAQ,CAACW,MAAM,GAAK,GAAG,CAAE,CACzB;AACA;AACAnB,UAAU,CAAC,8BAA8B,CAAC,CAC9C,CAAC,IAAK,CACF;AACA;AACAA,UAAU,CAACe,YAAY,CAAChB,OAAO,CAAC,CACpC,CACJ,CAAE,MAAOqB,KAAK,CAAE,CACZH,OAAO,CAACG,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAAC,CAClC,CACJ,CAAC,CAED,mBACI5B,KAAA,QAAK6B,SAAS,CAAC,qBAAqB,CAAAC,QAAA,eAChChC,IAAA,OAAAgC,QAAA,CAAI,2BAAyB,CAAI,CAAC,cAClChC,IAAA,OAAAgC,QAAA,CAAI,uBAAqB,CAAI,CAAC,cAC9B9B,KAAA,SAAM6B,SAAS,CAAC,cAAc,CAACE,QAAQ,CAAEpB,cAAe,CAAAmB,QAAA,eACpDhC,IAAA,UAAOkC,OAAO,CAAC,QAAQ,CAAAF,QAAA,CAAC,QAAM,CAAO,CAAC,cACtChC,IAAA,UAAOmC,KAAK,CAAE9B,MAAO,CAAC+B,QAAQ,CAAGtB,CAAC,EAAKR,SAAS,CAACQ,CAAC,CAACuB,MAAM,CAACF,KAAK,CAAE,CAACG,IAAI,CAAC,MAAM,CAACC,EAAE,CAAC,QAAQ,CAACC,IAAI,CAAC,QAAQ,CAAC,CAAC,cAEzGxC,IAAA,UAAOkC,OAAO,CAAC,UAAU,CAAAF,QAAA,CAAC,UAAQ,CAAO,CAAC,cAC1ChC,IAAA,UAAOmC,KAAK,CAAE5B,QAAS,CAAC6B,QAAQ,CAAGtB,CAAC,EAAKN,WAAW,CAACM,CAAC,CAACuB,MAAM,CAACF,KAAK,CAAE,CAACG,IAAI,CAAC,MAAM,CAACC,EAAE,CAAC,UAAU,CAACC,IAAI,CAAC,UAAU,CAAC,CAAC,cAEjHxC,IAAA,WAAQsC,IAAI,CAAC,QAAQ,CAAAN,QAAA,CAAC,UAAQ,CAAQ,CAAC,EACrC,CAAC,cACPhC,IAAA,QAAAgC,QAAA,CAAMvB,OAAO,CAAM,CAAC,cACpBT,IAAA,WAAQ+B,SAAS,CAAC,aAAa,CAACU,OAAO,CAAE7B,uBAAwB,CAAAoB,QAAA,CAAC,qCAAmC,CAAQ,CAAC,EAC7G,CAAC,CAEd,CAAC,CAED,cAAe,CAAA7B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}